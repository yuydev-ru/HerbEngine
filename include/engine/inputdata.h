#ifndef ENGINE_INPUTDATA_H
#define ENGINE_INPUTDATA_H

#include <string>
#include <unordered_map>
#include <raylib.h>

struct inputData
{
    std::unordered_map<std::string, KeyboardKey> data;

#define INSERT_KEYDATA(input_key) this->data.insert(std::make_pair(#input_key, KEY_##input_key));
    inputData()
    {
        // Keyboard
        INSERT_KEYDATA(NULL);
        INSERT_KEYDATA(A);
        INSERT_KEYDATA(B);
        INSERT_KEYDATA(C);
        INSERT_KEYDATA(D);
        INSERT_KEYDATA(E);
        INSERT_KEYDATA(F);
        INSERT_KEYDATA(G);
        INSERT_KEYDATA(H);
        INSERT_KEYDATA(I);
        INSERT_KEYDATA(J);
        INSERT_KEYDATA(K);
        INSERT_KEYDATA(L);
        INSERT_KEYDATA(M);
        INSERT_KEYDATA(N);
        INSERT_KEYDATA(O);
        INSERT_KEYDATA(P);
        INSERT_KEYDATA(Q);
        INSERT_KEYDATA(R);
        INSERT_KEYDATA(S);
        INSERT_KEYDATA(T);
        INSERT_KEYDATA(U);
        INSERT_KEYDATA(V);
        INSERT_KEYDATA(W);
        INSERT_KEYDATA(X);
        INSERT_KEYDATA(Y);
        INSERT_KEYDATA(Z);

        INSERT_KEYDATA(ZERO);
        INSERT_KEYDATA(ONE);
        INSERT_KEYDATA(TWO);
        INSERT_KEYDATA(THREE);
        INSERT_KEYDATA(FOUR);
        INSERT_KEYDATA(FIVE);
        INSERT_KEYDATA(SIX);
        INSERT_KEYDATA(SEVEN);
        INSERT_KEYDATA(EIGHT);
        INSERT_KEYDATA(NINE);

        INSERT_KEYDATA(PAUSE);
        INSERT_KEYDATA(ESCAPE);

        INSERT_KEYDATA(LEFT_CONTROL);
        INSERT_KEYDATA(LEFT_SHIFT);
        INSERT_KEYDATA(LEFT_ALT);
        INSERT_KEYDATA(LEFT_SUPER);

        INSERT_KEYDATA(RIGHT_CONTROL);
        INSERT_KEYDATA(RIGHT_SHIFT);
        INSERT_KEYDATA(RIGHT_ALT);
        INSERT_KEYDATA(RIGHT_SUPER);

        INSERT_KEYDATA(KB_MENU);

        INSERT_KEYDATA(LEFT_BRACKET);
        INSERT_KEYDATA(RIGHT_BRACKET);
        INSERT_KEYDATA(SEMICOLON);
        INSERT_KEYDATA(COMMA);
        INSERT_KEYDATA(PERIOD);
        INSERT_KEYDATA(APOSTROPHE);
        INSERT_KEYDATA(SLASH);
        INSERT_KEYDATA(BACKSLASH);

        INSERT_KEYDATA(MINUS);

        INSERT_KEYDATA(SPACE);
        INSERT_KEYDATA(BACKSPACE);
        INSERT_KEYDATA(TAB);
        INSERT_KEYDATA(PAGE_UP);
        INSERT_KEYDATA(PAGE_DOWN);

        INSERT_KEYDATA(END);
        INSERT_KEYDATA(HOME);
        INSERT_KEYDATA(INSERT);
        INSERT_KEYDATA(DELETE);

        INSERT_KEYDATA(KP_DECIMAL);
        INSERT_KEYDATA(KP_DIVIDE);
        INSERT_KEYDATA(KP_MULTIPLY);
        INSERT_KEYDATA(KP_SUBTRACT);
        INSERT_KEYDATA(KP_ADD);
        INSERT_KEYDATA(KP_ENTER);
        INSERT_KEYDATA(KP_EQUAL);

        INSERT_KEYDATA(LEFT);
        INSERT_KEYDATA(RIGHT);
        INSERT_KEYDATA(UP);
        INSERT_KEYDATA(DOWN);

        INSERT_KEYDATA(KP_0);
        INSERT_KEYDATA(KP_1);
        INSERT_KEYDATA(KP_2);
        INSERT_KEYDATA(KP_3);
        INSERT_KEYDATA(KP_4);
        INSERT_KEYDATA(KP_5);
        INSERT_KEYDATA(KP_6);
        INSERT_KEYDATA(KP_7);
        INSERT_KEYDATA(KP_8);
        INSERT_KEYDATA(KP_9);

        INSERT_KEYDATA(F1);
        INSERT_KEYDATA(F2);
        INSERT_KEYDATA(F3);
        INSERT_KEYDATA(F4);
        INSERT_KEYDATA(F5);
        INSERT_KEYDATA(F6);
        INSERT_KEYDATA(F7);
        INSERT_KEYDATA(F8);
        INSERT_KEYDATA(F9);
        INSERT_KEYDATA(F10);
        INSERT_KEYDATA(F11);
        INSERT_KEYDATA(F12);
    }
#undef INSERT_KEYDATA

    KeyboardKey
    stringToKeyboardKey(const std::string &key)
    {
        return this->data[key];
    }
};

#endif
